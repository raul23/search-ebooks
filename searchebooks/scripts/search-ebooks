#!/usr/bin/env python
import argparse
import os

from diskcache import Cache

import searchebooks
from pyebooktools.lib import (
    BLUE, GREEN, NC, RED, YELLOW, color_msg as c)
from pyebooktools.utils.genutils import (
    get_config_dict, namespace_to_dict, override_config_with_args, setup_log)
from pyebooktools.utils.logutils import init_log
from searchebooks.configs import default_config as default_cfg, __path__
from searchebooks.search_ebooks import searcher

logger = init_log(__name__, __file__)

# =====================
# Default config values
# =====================
DEFAULT_EBOOK_FORMATS = ['djvu', 'epub', 'html', 'pdf', 'txt']
EBOOK_FORMATS = default_cfg.ebook_formats
CACHE_FOLDER = default_cfg.cache_folder
CACHE_SIZE_LIMIT = default_cfg.cache_size_limit
DJVU_SEARCH_METHOD = default_cfg.djvu_search_method
DJVU_SEARCH_METHODS = ['djvutxt', 'calibre']
EPUB_SEARCH_METHOD = default_cfg.epub_search_method
EPUB_SEARCH_METHODS = ['zipgrep', 'calibre']
EVICTION_POLICY = default_cfg.eviction_policy
MSWORD_SEARCH_METHOD = default_cfg.msword_search_method
MSWORD_SEARCH_METHODS = ['catdoc', 'textutil', 'calibre']
PDF_SEARCH_METHOD = default_cfg.pdf_search_method
PDF_SEARCH_METHODS = ['pdftotext', 'calibre']
USE_CACHE = default_cfg.use_cache


class ArgumentParser(argparse.ArgumentParser):

    def error(self, message):
        # self.print_help(sys.stderr)
        # self.print_usage(sys.stderr)
        print(self.format_usage().splitlines()[0])
        self.exit(2, c(f'\nerror: {message}\n', 'r'))


# Ref.: https://stackoverflow.com/a/32891625/14664104
class MyFormatter(argparse.HelpFormatter):
    """
    Corrected _max_action_length for the indenting of subactions
    """

    def add_argument(self, action):
        if action.help is not argparse.SUPPRESS:

            # find all invocations
            get_invocation = self._format_action_invocation
            invocations = [get_invocation(action)]
            current_indent = self._current_indent
            for subaction in self._iter_indented_subactions(action):
                # compensate for the indent that will be added
                indent_chg = self._current_indent - current_indent
                added_indent = 'x' * indent_chg
                invocations.append(added_indent + get_invocation(subaction))
            # print('inv', invocations)

            # update the maximum item length
            invocation_length = max([len(s) for s in invocations])
            action_length = invocation_length + self._current_indent
            self._action_max_length = max(self._action_max_length,
                                          action_length)

            # add the item to the list
            self._add_item(self._format_action, [action])

    # Ref.: https://stackoverflow.com/a/23941599/14664104
    def _format_action_invocation(self, action):
        if not action.option_strings:
            metavar, = self._metavar_formatter(action, action.dest)(1)
            return metavar
        else:
            parts = []
            # if the Optional doesn't take a value, format is:
            #    -s, --long
            if action.nargs == 0:
                parts.extend(action.option_strings)

            # if the Optional takes a value, format is:
            #    -s ARGS, --long ARGS
            # change to
            #    -s, --long ARGS
            else:
                default = action.dest.upper()
                args_string = self._format_args(action, default)
                for option_string in action.option_strings:
                    # parts.append('%s %s' % (option_string, args_string))
                    parts.append('%s' % option_string)
                parts[-1] += ' %s'%args_string
            return ', '.join(parts)


def check_formats():
    class CheckFromats(argparse.Action):
        def __call__(self, parser, args, values, option_string=None):
            for i, v in enumerate(values):
                if v.startswith('.'):
                    v = v[1:]
                    values[i] = v
                if v not in DEFAULT_EBOOK_FORMATS:
                    msg = f'argument "{self.dest}" doesn\'t support {v}. Only ' \
                          'the following ebook formats are supported: ' \
                          f'{DEFAULT_EBOOK_FORMATS}'
                    raise argparse.ArgumentTypeError(msg)
            setattr(args, self.dest, values)
    return CheckFromats


def get_default_message(default_value):
    return f' ({GREEN}default: {default_value}{NC})'


def process_returned_values(returned_values):
    def log_opts_overriden(opts_overriden, msg, log_level='debug'):
        nb_items = len(opts_overriden)
        for i, (cfg_name, old_v, new_v) in enumerate(opts_overriden):
            msg += f'\t {cfg_name}: {old_v} --> {new_v}'
            if i + 1 < nb_items:
                msg += "\n"
        getattr(logger, log_level)(msg)

    # Process 1st returned values: default args overriden by config options
    if returned_values.default_args_overriden:
        msg = 'Default arguments overridden by config options:\n'
        log_opts_overriden(returned_values.default_args_overriden, msg)
    # Process 2nd returned values: config options overriden by args
    if returned_values.config_opts_overridden:
        msg = 'Config options overridden by command-line arguments:\n'
        log_opts_overriden(returned_values.config_opts_overridden, msg, 'debug')
    # Process 3rd returned values: arguments not found in config file
    """
    if args_not_found_in_config:
        msg = 'Command-line arguments not found in config file: ' \
              f'\n\t{args_not_found_in_config}'
        logger.debug(msg)
    """


def setup_argparser():
    width = os.get_terminal_size().columns - 5
    # Setup the parser
    name_input = 'input_data'
    msg = 'Search through content and metadata of ebooks.'
    parser = ArgumentParser(
        description=f'{RED}IMPORTANT{NC}: if an argument has spaces, enclose it in '
                    'quotation marks, e.g. "Book title with spaces"',
        usage=f'{BLUE}%(prog)s [OPTIONS] {name_input}{NC}\n\n{msg}',
        add_help=False,
        # ArgumentDefaultsHelpFormatter
        # HelpFormatter
        # RawDescriptionHelpFormatter
        formatter_class=lambda prog: MyFormatter(
            prog, max_help_position=50, width=width))
    general_group = parser.add_argument_group(
        title=f'{YELLOW}General options{NC}')
    general_group.add_argument(
        '-h', '--help', action='help',
        help='Show this help message and exit.')
    general_group.add_argument(
        '-v', '--version', action='version',
        version=f'%(prog)s v{searchebooks.__version__}',
        help="Show program's version number and exit.")
    general_group.add_argument(
        '-q', '--quiet', action='store_true',
        help='Enable quiet mode, i.e. nothing will be printed.')
    general_group.add_argument(
        '--verbose', action='store_true',
        help='Print various debugging information, e.g. print traceback '
             'when there is an exception.')
    general_group.add_argument(
        '-i', '--ignore-case', action='store_true',
        help='Perform case insensitive matching. By default, %(prog)s is case '
             'sensitive.')
    # =====
    # Cache
    # =====
    cache_group = parser.add_argument_group(title=f'{YELLOW}Cache options{NC}')
    cache_group.add_argument(
        '--use-cache', action='store_true', help='Use cache.')
    cache_group.add_argument(
        '--cache-folder', default=CACHE_FOLDER,
        help='Cache folder.' + get_default_message(CACHE_FOLDER))
    cache_group.add_argument(
        '--ep', '--eviction-policy', dest='eviction_policy', metavar='POLICY',
        choices=['least-recently-stored', 'least-recently-used',
                 'least-frequently-used', 'none'], default=EVICTION_POLICY,
        help='Eviction policy which can either be: `least-recently-stored`, '
             '`least-recently-used`,  `least-frequently-used` or '
             '`none` (never evict keys).' + get_default_message(EVICTION_POLICY))
    cache_group.add_argument(
        '--csl', '--cache-size-limit', metavar='SIZE', dest='cache_size_limit',
        default=CACHE_SIZE_LIMIT, type=int,
        help='Size limit in gigabytes (GB).'
             + get_default_message(CACHE_SIZE_LIMIT))
    cache_group.add_argument(
        '-c', '--clear-cache', dest='clear_cache', action='store_true',
        help='Clear cache.')
    # ===========
    # Search text
    # ===========
    search_text_group = parser.add_argument_group(
        title=f'{YELLOW}Search options{NC}')
    search_text_group.add_argument(
        '--query', dest='search_query', metavar='QUERY', required=True,
        help='Search query which can also be a regex.')
    search_text_group.add_argument(
        '-f', '--ebook-formats', metavar='FORMAT', nargs='+',
        default=EBOOK_FORMATS, action=check_formats(),
        choices=DEFAULT_EBOOK_FORMATS,
        help=f'Choice one or more from: {DEFAULT_EBOOK_FORMATS}.'
             + get_default_message(EBOOK_FORMATS))
    search_text_group.add_argument(
        '--dsm', '--djvu-search-method', metavar='METHOD',
        dest='djvu_search_method', choices=DJVU_SEARCH_METHODS,
        default=DJVU_SEARCH_METHOD,
        help='Search method for djvu files. Choose one from: '
             f'{DJVU_SEARCH_METHODS}.' + get_default_message(DJVU_SEARCH_METHOD))
    search_text_group.add_argument(
        '--msm', '--msword-search-method', metavar='METHOD',
        dest='msword_search_method', choices=MSWORD_SEARCH_METHODS,
        default=MSWORD_SEARCH_METHOD,
        help='Search method for doc files. Choose one from '
             f'{MSWORD_SEARCH_METHODS}.' + get_default_message(MSWORD_SEARCH_METHOD))
    search_text_group.add_argument(
        '--esm', '--epub-search-method', metavar='METHOD',
        dest='epub_search_method', choices=EPUB_SEARCH_METHOD,
        default=EPUB_SEARCH_METHOD,
        help='Search method for epub files. Choose one from: '
             f'{EPUB_SEARCH_METHODS}.' + get_default_message(EPUB_SEARCH_METHOD))
    search_text_group.add_argument(
        '--psm', '--pdf-search-method', metavar='METHOD',
        dest='pdf_search_method', choices=PDF_SEARCH_METHODS,
        default=PDF_SEARCH_METHOD,
        help='Search method for pdf files. Choose one from: '
             f'{PDF_SEARCH_METHOD}.' + get_default_message(PDF_SEARCH_METHOD))
    # ===============
    # Search metadata
    # ===============
    search_metadata_group = parser.add_argument_group(
        title=f'{YELLOW}Advanced search options{NC}',
        description=f'{RED}IMPORTANT:{NC} all the selected fields and the '
                    'search query are linked with ANDs between each other')
    search_metadata_group.add_argument(
        '-a', '--authors', help='Authors')
    search_metadata_group.add_argument(
        '-k', '--book-producer', help='Book producer')
    search_metadata_group.add_argument(
        '--category', help='Category')
    search_metadata_group.add_argument(
        '--comments', help='Comments')
    search_metadata_group.add_argument(
        '-d', '--date', help='Published date')
    search_metadata_group.add_argument(
        '--identifiers', help='Identifiers')
    search_metadata_group.add_argument(
        '--isbn', help='ISBN')
    search_metadata_group.add_argument(
        '-l', '--language', help='Language')
    search_metadata_group.add_argument(
        '-p', '--publisher', help='Publisher')
    search_metadata_group.add_argument(
        '--rating', help='Rating')
    search_metadata_group.add_argument(
        '-s', '--series', help='Series')
    search_metadata_group.add_argument(
        '--tags', help='Tags')
    search_metadata_group.add_argument(
        '-t', '--title', help='Title')
    # ==============
    # Input argument
    # ==============
    input_group = parser.add_argument_group(title=f'{YELLOW}Input argument{NC}')
    input_group.add_argument(
        name_input,
        help='Can either be the path to an ebook or a folder containing ebooks.')
    return parser


def main():
    try:
        parser = setup_argparser()
        args = parser.parse_args()
        # Get main cfg dict
        # TODO: important, check if an option is defined more than once
        configs_dirpath = __path__[0]
        main_cfg = argparse.Namespace(**get_config_dict('main', configs_dirpath))
        # Override main configuration from file with command-line arguments
        returned_values = override_config_with_args(main_cfg, parser, default_cfg)
        # TODO: check if can be done before
        main_cfg.cache_size_limit *= 10 ** 9
        setup_log(package='searchebooks', configs_dirpath=configs_dirpath,
                  quiet=main_cfg.quiet,
                  verbose=main_cfg.verbose,
                  logging_level=main_cfg.logging_level,
                  logging_formatter=main_cfg.logging_formatter)
        process_returned_values(returned_values)
        # Setup cache
        cache = Cache(directory=main_cfg.cache_folder,
                      eviction_policy=main_cfg.eviction_policy,
                      size_limit=main_cfg.cache_size_limit)
        if args.clear_cache:
            result = cache.clear()
            if result:
                logger.info('Cache cleared!')
            else:
                logger.debug('Cache was already empty!')
        return searcher.search(cache=cache, **namespace_to_dict(main_cfg))
    except AssertionError as e:
        # TODO (IMPORTANT): use same logic as in Darth-Vader-RPi
        # TODO: add KeyboardInterruptError
        logger.error(e)
        return 1


if __name__ == '__main__':
    # search-ebooks ~/test/_search_ebooks/search_text/... --use-cache
    retcode = main()
